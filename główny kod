#include <stdio.h>    
#include <Wire.h>
#include <Rtc_Pcf8563.h>
                              //pin5 to A4, pin6 to A5
Rtc_Pcf8563 rtc;              //pin3 to D3 

const byte PIN_LATCH = 12;  // pin connected to ST_CP of 74HC595(pin 12)
const byte PIN_CLOCK = 13;  // pin connected to SH_CP of 74HC595(pin 11)
const byte PIN_DATA = 8;    // pin connected to DS of 74HC595(pin 14)

const int tr1 = 5;
const int tr2 = 6;
const int tr3 = 9;
const int tr4 = 10;

#define przycisk1 2
#define przycisk2 4
#define budzik 11

#define fotorez A0

  int godzina2;
  int minuta2;
  int godzinaset;
  int minutaset;
  int autobright=1;
  int setalarm=1;
  int zal_budzika=0;
  
  int czaswyl=0;
  
int a=1;             
int b=1;
int c=15;            //czas przełączania przez przycisk set

int a2=1;
int b2=1;

int jasnosc=255;
int opoznienie=1000; 

const byte SevenSeg[24] = 
{
     B11111100, B01100000, B11011010, B11110010,   // 0 1 2 3
     B01100110, B10110110, B10111110, B11100000,   // 4 5 6 7
     B11111110, B11110110, B11101110, B00111110,   // 8 9 A B      
     B10001110, B01111010, B00111000, B00001010,   // F D u r     (12,13,14,15)
     B00101010, B00111010, B01101110, B00000001,   // m o H dot   (16,17,18,19) 
     B00011100, B00000000, B00000000, B00000000,   // L 0 0 0     (20,21,22,23)
};

void setup() 
{
  pinMode(PIN_LATCH, OUTPUT);
  pinMode(PIN_CLOCK, OUTPUT);
  pinMode(PIN_DATA, OUTPUT);

  pinMode(tr1, OUTPUT);
  pinMode(tr2, OUTPUT);
  pinMode(tr3, OUTPUT);
  pinMode(tr4, OUTPUT);

  pinMode(7, OUTPUT);
  
  pinMode(przycisk1, INPUT_PULLUP);
  pinMode(przycisk2, INPUT_PULLUP);
 
  pinMode(fotorez, INPUT);
  pinMode(budzik, OUTPUT);

  digitalWrite(budzik, LOW);
  digitalWrite(PIN_LATCH, LOW);  
  //Serial.begin(9600);
  rtc.initClock();
  rtc.setTime(00, 00, 00);
}

void loop() 
{
  if(autobright>=3)
    brightauto();
    
  setprzycisk();
  budzik_centrala();
  
  switch(b)
  {
    case 1:              //czas
      czas();
      turnoff();   
      break;
      
    case 2:              // ustawienie godz
      settimehr();
      turnoff();
      funkcjanaprawcza();
      break;
      
    case 3:              // ustawienie min
      settimemin();
      turnoff();
      funkcjanaprawcza();
      break;
    
    case 4:              //czy jasność automatyczna?
      brightset();
      funkcjanaprawcza();
      break;
      
    case 5:              // jeżeli tak to pomiń, jeżeli nie to ustaw ręcznie
      if(autobright<3){
        bright();
        funkcjanaprawcza();
      }else
      b+=1;
      turnoff();
      break;
    
    case 6:              //czy alarm ma być ustawiony 
      alarmset();
      turnoff();
      funkcjanaprawcza();
      break;
      
    case 7:
      if(setalarm<3){
        b=10;
        a=c-1;
      }
      budzik_godzina();       //alarm - godzina      
      funkcjanaprawcza();
      turnoff();        
      break;
      
    case 8:                   //alarm - min
      budzik_minuta();
      funkcjanaprawcza();
      turnoff();
      break;
    case 9:      
      break;
      
    default:
      turnoff();
      break;
  }
}

void shift(int tranzystor, byte digit)
{  
  turnoff();
  digitalWrite(PIN_LATCH, LOW); 
  
  shiftOut(PIN_DATA, PIN_CLOCK, MSBFIRST, digit);
  digitalWrite(PIN_LATCH, HIGH); 
  
  analogWrite(tranzystor,jasnosc);                //sterowanie jasnością (1-255)
  delayMicroseconds(2000);                       
}                                          

void turnoff()
{
    analogWrite(tr1,0);
    analogWrite(tr2,0);
    analogWrite(tr3,0);
    analogWrite(tr4,0);   
}

void wyswietlacz(int godzina, int minuta,int sekunda,int wariant)
{
  int d1,d2,d3,d4,d7;
  
  if(wariant==0)  //czas
  { 
    d7=sekunda;

    d4=minuta%10;
    d3=(minuta/10)%10; 
    d2=godzina%10;
    d1=(godzina/10)%10;
  }
  if(wariant == 1)      //ustawienie godz
  { 
    d7=2;

    d4=godzina%10;
    d3=(godzina/10)%10;   
    d2=15;
    d1=18;
  } 
  if(wariant == 2)      //ustawienie min
  { 
    d7=2;

    d4=minuta%10;
    d3=(minuta/10)%10;   
    d2=16;
    d1=16;  
  }
  if(wariant == 3)      // jasność ręczna
  { 
    d7=2;

    d4=map(jasnosc,255,0,5,0)%10;
    d3=map(jasnosc,255,0,5,0)/10%10;   
    d2=15;
    d1=11;  
  }
  if(wariant == 4)      //off autobright
  { 
    d7=2;

    d4=12;
    d3=17; 
    if(rtc.getSecond()%3!=0){ 
      d2=15;
      d1=11;
    }else
    {
      d2=14;
      d1=10;
    }  
  }
  if(wariant == 5)      //on autobright
  { 
    d7=2;

    d4=16;
    d3=17;
    if(rtc.getSecond()%3!=0){ 
      d2=15;
      d1=11;
    }else
    {
      d2=14;
      d1=10;
    } 
  } 
  if(wariant == 6)    // alarm off
  {
    d7=2;
    
    d4=12;
    d3=17; 
    d2=20;
    d1=10;
  }
  if(wariant == 7)    //alarm on
  {
    d7=2;
    
    d4=16;
    d3=17; 
    d2=20;
    d1=10;
  }
  if(wariant == 8)    //alarm on    HR
  {
    d7=2;
    
    d4=godzina%10;
    d3=godzina/10;
   
    if(rtc.getSecond()%2!=0){ 
      d2=20;
      d1=10;
    }else
    {
      d2=15;
      d1=18;
    }
  }
    if(wariant == 9)    //alarm on    min
  {
    d7=2;
    
    d4=minuta%10;
    d3=minuta/10;
   
    if(rtc.getSecond()%2!=0){ 
      d2=20;
      d1=10;
    }else
    {
      d2=16;
      d1=16;
    }
  }
  
    for(int i=0; i<10;i++)
    {
      shift(tr1,SevenSeg[d1]); 
      shift(tr2,SevenSeg[d2]);
      kropka(d7);
      shift(tr3,SevenSeg[d3]);
      shift(tr4,SevenSeg[d4]);
    }
}

void czas()
{
  int hour,minute,second;
  
  hour=rtc.getHour();
  minute=rtc.getMinute();
  second=rtc.getSecond();

  wyswietlacz(hour, minute, second,0);        //godziny i minuty
} 

void kropka(int sekunda)
{
    if(sekunda%2==0)
    {
      digitalWrite(7, HIGH);    
      analogWrite(tr2, jasnosc);
    }else
      digitalWrite(7, LOW);    
}

void setprzycisk()
{
  if(digitalRead(przycisk1) == LOW)
  {
    a+=1;
    
    if(a>=c)
    {
      a=1;
    }
    b = map(a,1,c,1,10);
    if(b!=1)
      delay(80);

    //Serial.print(a);
    //Serial.print("    przycisk1    ");
    //Serial.println(b);
  } 
}

void setprzycisk2(int wartosc)      //tu podanie wart z różnych ekranów
{
  if(digitalRead(przycisk2) == LOW)
    a2+=1;
  //Serial.print(a2);
  switch(wartosc){
    
    case(1):
      if(a2==3)
      {
        godzina2+=1;
        a2=1;                       //spowolnienie 
        if(godzina2==24)
          godzina2=0;
      }
      break;
      
   case(2):
     if(a2==3)
     {
       minuta2+=1;
       a2=1;
       if(minuta2==60)
          minuta2=0;
     }
     break;
     
   case(3):
     if(a2==3)
     {
       jasnosc-=50;

          //Serial.print(jasnosc);
          //Serial.print("    ");
          //Serial.println(opoznienie);
       if(jasnosc<5)
         jasnosc=255;
       a2=1;
     }
     break;
     
   case(4):                     //ustawienie godziny alarmu
     if(a2==3)
     {
         godzinaset+=1;
         a2=1;                  //spowolnienie 
         if(godzinaset==24)
           godzinaset=0;
     }
     break;
     
   case(5):                     //ustawianie minuty alarmu
     if(a2==3)
     {
       minutaset+=1;
       a2=1;
       if(minutaset==60)
         minutaset=0;
     }
     break;
     
   default:
   break;
  }
}

void settimehr()
{
  godzina2 = rtc.getHour();
  setprzycisk2(1);

  rtc.setTime(godzina2, rtc.getMinute(), rtc.getSecond()); 
  wyswietlacz(godzina2,0,0,1);
  
}

void settimemin()
{
  
  minuta2=rtc.getMinute();
  setprzycisk2(2);

  rtc.setTime(rtc.getHour(), minuta2, rtc.getSecond());   
  wyswietlacz(0,minuta2,0,2);
}

void bright()
{
  setprzycisk2(3);
  
  opoznienie=map(jasnosc,255,0,2000,8000);
  wyswietlacz(0,0,0,3); 
}

void brightauto()
{
  b2+=1;
  if((rtc.getSecond())%3==0 & autobright>=3 & b!=6 & b2>30)
  {   
    if(analogRead(fotorez)<3)
      jasnosc=1;
    if(analogRead(fotorez)>=3 & analogRead(fotorez)<=40)
      jasnosc=map(analogRead(fotorez),200,5,255,50);
    if(analogRead(fotorez)>40 & analogRead(fotorez)<=200)
      jasnosc=map(analogRead(fotorez),200,40,255,100);
    if(analogRead(fotorez)>200)
      jasnosc=255;
    opoznienie=map(jasnosc,255,0,2000,8000);
    b2=1;
  }
}

void brightset()                          // ustawianie czasu budzika on-off
{
  if(digitalRead(przycisk2)==LOW)
  {
    autobright+=1;
    if(autobright>6)
      autobright=1;
  }
  if(autobright<3)
  {    
    wyswietlacz(0,0,0,4);      //off
  }
  else
  {
    wyswietlacz(0,0,0,5);      //on
  }
}

void alarmset()
{
  if(digitalRead(przycisk2)==LOW)
  {
    setalarm+=1;
    if(setalarm>6)
      setalarm=1;
  }
  if(setalarm<3)
  {    
    wyswietlacz(0,0,0,6);      //off
    zal_budzika=0;
  }
  else
  {
    wyswietlacz(0,0,0,7);      //on
    zal_budzika=1;
  }  
}

void budzik_godzina()
{
  setprzycisk2(4);
  wyswietlacz(godzinaset,0,0,8);
}

void budzik_minuta()
{
  setprzycisk2(5);
  wyswietlacz(0,minutaset,0,9);
}

void budzik_centrala()
{
  if(zal_budzika ==1){                                              //jeżeli włączony jest alarm to może się włączyć
    if(godzinaset == rtc.getHour() & minutaset == rtc.getMinute() & rtc.getSecond() == 0)
      digitalWrite(budzik, HIGH);
  }else
    digitalWrite(budzik, LOW);    
  if(digitalRead(budzik)== HIGH&(digitalRead(przycisk1) == LOW || digitalRead(przycisk2) == LOW))    
    zal_budzika=0;                                                 //warunek wyłączenia budzika
}

void funkcjanaprawcza()
{  
  if(digitalRead(przycisk1)== HIGH & digitalRead(przycisk2)== HIGH)
  {
    //Serial.println(czaswyl);
    if(rtc.getSecond()%3 == 0)
      czaswyl+=1;
    if(czaswyl==30){
      czaswyl=0;
      a=1;
      b=1;
    }
  }else
    czaswyl=0;
}
